// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: order.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createOrderFromEstimate = `-- name: CreateOrderFromEstimate :one
INSERT INTO orders (
    user_id, estimate_id, total_price, estimated_delivery_time_in_minutes
) 
SELECT 
    user_id, id, total_price, estimated_delivery_time_in_minutes
FROM estimates
WHERE id = $1::uuid
RETURNING id, total_price, estimated_delivery_time_in_minutes
`

type CreateOrderFromEstimateRow struct {
	ID                             uuid.UUID `json:"id"`
	TotalPrice                     int64     `json:"total_price"`
	EstimatedDeliveryTimeInMinutes int       `json:"estimated_delivery_time_in_minutes"`
}

func (q *Queries) CreateOrderFromEstimate(ctx context.Context, dollar_1 uuid.UUID) (CreateOrderFromEstimateRow, error) {
	row := q.db.QueryRow(ctx, createOrderFromEstimate, dollar_1)
	var i CreateOrderFromEstimateRow
	err := row.Scan(&i.ID, &i.TotalPrice, &i.EstimatedDeliveryTimeInMinutes)
	return i, err
}

const createOrderItem = `-- name: CreateOrderItem :exec
INSERT INTO order_items (
    order_merchant_id, item_id, quantity
)
VALUES ($1, $2, $3)
`

type CreateOrderItemParams struct {
	OrderMerchantID uuid.UUID `json:"order_merchant_id"`
	ItemID          uuid.UUID `json:"item_id"`
	Quantity        int       `json:"quantity"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) error {
	_, err := q.db.Exec(ctx, createOrderItem, arg.OrderMerchantID, arg.ItemID, arg.Quantity)
	return err
}

const createOrderMerchant = `-- name: CreateOrderMerchant :one
INSERT INTO order_merchants (
    order_id, merchant_id, is_starting_point
)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateOrderMerchantParams struct {
	OrderID         uuid.UUID `json:"order_id"`
	MerchantID      uuid.UUID `json:"merchant_id"`
	IsStartingPoint bool      `json:"is_starting_point"`
}

func (q *Queries) CreateOrderMerchant(ctx context.Context, arg CreateOrderMerchantParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createOrderMerchant, arg.OrderID, arg.MerchantID, arg.IsStartingPoint)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getEstimateOrderDetails = `-- name: GetEstimateOrderDetails :many
SELECT 
    eo.merchant_id,
    eo.is_starting_point,
    eoi.item_id,
    eoi.quantity
FROM estimate_orders eo
JOIN estimate_order_items eoi ON eo.id = eoi.estimate_order_id
WHERE eo.estimate_id = $1::uuid
ORDER BY eo.id
`

type GetEstimateOrderDetailsRow struct {
	MerchantID      uuid.UUID `json:"merchant_id"`
	IsStartingPoint bool      `json:"is_starting_point"`
	ItemID          uuid.UUID `json:"item_id"`
	Quantity        int       `json:"quantity"`
}

func (q *Queries) GetEstimateOrderDetails(ctx context.Context, dollar_1 uuid.UUID) ([]GetEstimateOrderDetailsRow, error) {
	rows, err := q.db.Query(ctx, getEstimateOrderDetails, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetEstimateOrderDetailsRow{}
	for rows.Next() {
		var i GetEstimateOrderDetailsRow
		if err := rows.Scan(
			&i.MerchantID,
			&i.IsStartingPoint,
			&i.ItemID,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderById = `-- name: GetOrderById :one
SELECT id, estimate_id, total_price, estimated_delivery_time_in_minutes, created_at
FROM orders
WHERE id = $1::uuid
`

type GetOrderByIdRow struct {
	ID                             uuid.UUID `json:"id"`
	EstimateID                     uuid.UUID `json:"estimate_id"`
	TotalPrice                     int64     `json:"total_price"`
	EstimatedDeliveryTimeInMinutes int       `json:"estimated_delivery_time_in_minutes"`
	CreatedAt                      time.Time `json:"created_at"`
}

func (q *Queries) GetOrderById(ctx context.Context, dollar_1 uuid.UUID) (GetOrderByIdRow, error) {
	row := q.db.QueryRow(ctx, getOrderById, dollar_1)
	var i GetOrderByIdRow
	err := row.Scan(
		&i.ID,
		&i.EstimateID,
		&i.TotalPrice,
		&i.EstimatedDeliveryTimeInMinutes,
		&i.CreatedAt,
	)
	return i, err
}
