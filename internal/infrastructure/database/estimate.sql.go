// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: estimate.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createEstimate = `-- name: CreateEstimate :one
INSERT INTO estimates (
    user_lat, user_lng, total_price, estimated_delivery_time_in_minutes
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, total_price, estimated_delivery_time_in_minutes
`

type CreateEstimateParams struct {
	UserLat                        float64 `json:"user_lat"`
	UserLng                        float64 `json:"user_lng"`
	TotalPrice                     int64   `json:"total_price"`
	EstimatedDeliveryTimeInMinutes int32   `json:"estimated_delivery_time_in_minutes"`
}

type CreateEstimateRow struct {
	ID                             uuid.UUID `json:"id"`
	TotalPrice                     int64     `json:"total_price"`
	EstimatedDeliveryTimeInMinutes int32     `json:"estimated_delivery_time_in_minutes"`
}

func (q *Queries) CreateEstimate(ctx context.Context, arg CreateEstimateParams) (CreateEstimateRow, error) {
	row := q.db.QueryRow(ctx, createEstimate,
		arg.UserLat,
		arg.UserLng,
		arg.TotalPrice,
		arg.EstimatedDeliveryTimeInMinutes,
	)
	var i CreateEstimateRow
	err := row.Scan(&i.ID, &i.TotalPrice, &i.EstimatedDeliveryTimeInMinutes)
	return i, err
}

const createEstimateOrder = `-- name: CreateEstimateOrder :exec
INSERT INTO estimate_orders (
    estimate_id, merchant_id, is_starting_point
) VALUES (
    $1, $2, $3
)
`

type CreateEstimateOrderParams struct {
	EstimateID      uuid.UUID `json:"estimate_id"`
	MerchantID      uuid.UUID `json:"merchant_id"`
	IsStartingPoint bool      `json:"is_starting_point"`
}

func (q *Queries) CreateEstimateOrder(ctx context.Context, arg CreateEstimateOrderParams) error {
	_, err := q.db.Exec(ctx, createEstimateOrder, arg.EstimateID, arg.MerchantID, arg.IsStartingPoint)
	return err
}

const createEstimateOrderItem = `-- name: CreateEstimateOrderItem :exec
INSERT INTO estimate_order_items (
    estimate_order_id, item_id, quantity
) VALUES (
    $1, $2, $3
)
`

type CreateEstimateOrderItemParams struct {
	EstimateOrderID uuid.UUID `json:"estimate_order_id"`
	ItemID          uuid.UUID `json:"item_id"`
	Quantity        int32     `json:"quantity"`
}

func (q *Queries) CreateEstimateOrderItem(ctx context.Context, arg CreateEstimateOrderItemParams) error {
	_, err := q.db.Exec(ctx, createEstimateOrderItem, arg.EstimateOrderID, arg.ItemID, arg.Quantity)
	return err
}

const getEstimateById = `-- name: GetEstimateById :one
SELECT id, user_lat, user_lng, total_price, estimated_delivery_time_in_minutes, created_at
FROM estimates
WHERE id = $1::uuid
`

func (q *Queries) GetEstimateById(ctx context.Context, dollar_1 uuid.UUID) (Estimates, error) {
	row := q.db.QueryRow(ctx, getEstimateById, dollar_1)
	var i Estimates
	err := row.Scan(
		&i.ID,
		&i.UserLat,
		&i.UserLng,
		&i.TotalPrice,
		&i.EstimatedDeliveryTimeInMinutes,
		&i.CreatedAt,
	)
	return i, err
}

const getEstimateOrderIds = `-- name: GetEstimateOrderIds :many
SELECT id, merchant_id
FROM estimate_orders
WHERE estimate_id = $1
ORDER BY id
`

type GetEstimateOrderIdsRow struct {
	ID         uuid.UUID `json:"id"`
	MerchantID uuid.UUID `json:"merchant_id"`
}

func (q *Queries) GetEstimateOrderIds(ctx context.Context, estimateID uuid.UUID) ([]GetEstimateOrderIdsRow, error) {
	rows, err := q.db.Query(ctx, getEstimateOrderIds, estimateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetEstimateOrderIdsRow{}
	for rows.Next() {
		var i GetEstimateOrderIdsRow
		if err := rows.Scan(&i.ID, &i.MerchantID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemPrice = `-- name: GetItemPrice :one
SELECT price
FROM items
WHERE id = $1::uuid AND merchant_id = $2::uuid
`

type GetItemPriceParams struct {
	ItemID     uuid.UUID `json:"item_id"`
	MerchantID uuid.UUID `json:"merchant_id"`
}

func (q *Queries) GetItemPrice(ctx context.Context, arg GetItemPriceParams) (int64, error) {
	row := q.db.QueryRow(ctx, getItemPrice, arg.ItemID, arg.MerchantID)
	var price int64
	err := row.Scan(&price)
	return price, err
}

const getItemPricesByIDsAndMerchants = `-- name: GetItemPricesByIDsAndMerchants :many
SELECT i.id, i.merchant_id, i.price
FROM items i
JOIN (
    SELECT 
        UNNEST($1::uuid[]) AS item_id,
        UNNEST($2::uuid[]) AS merchant_id
) AS pairs ON i.id = pairs.item_id AND i.merchant_id = pairs.merchant_id
`

type GetItemPricesByIDsAndMerchantsParams struct {
	ItemID     []uuid.UUID `json:"item_id"`
	MerchantID []uuid.UUID `json:"merchant_id"`
}

type GetItemPricesByIDsAndMerchantsRow struct {
	ID         uuid.UUID `json:"id"`
	MerchantID uuid.UUID `json:"merchant_id"`
	Price      int64     `json:"price"`
}

func (q *Queries) GetItemPricesByIDsAndMerchants(ctx context.Context, arg GetItemPricesByIDsAndMerchantsParams) ([]GetItemPricesByIDsAndMerchantsRow, error) {
	rows, err := q.db.Query(ctx, getItemPricesByIDsAndMerchants, arg.ItemID, arg.MerchantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetItemPricesByIDsAndMerchantsRow{}
	for rows.Next() {
		var i GetItemPricesByIDsAndMerchantsRow
		if err := rows.Scan(&i.ID, &i.MerchantID, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMerchantLatLong = `-- name: GetMerchantLatLong :one
SELECT id, lat, lng
FROM merchants
WHERE id = $1::uuid
`

type GetMerchantLatLongRow struct {
	ID  uuid.UUID `json:"id"`
	Lat float64   `json:"lat"`
	Lng float64   `json:"lng"`
}

func (q *Queries) GetMerchantLatLong(ctx context.Context, merchantID uuid.UUID) (GetMerchantLatLongRow, error) {
	row := q.db.QueryRow(ctx, getMerchantLatLong, merchantID)
	var i GetMerchantLatLongRow
	err := row.Scan(&i.ID, &i.Lat, &i.Lng)
	return i, err
}

const getMerchantsLatLong = `-- name: GetMerchantsLatLong :many
SELECT id, lat, lng
FROM merchants
WHERE id = ANY($1::uuid[])
`

type GetMerchantsLatLongRow struct {
	ID  uuid.UUID `json:"id"`
	Lat float64   `json:"lat"`
	Lng float64   `json:"lng"`
}

func (q *Queries) GetMerchantsLatLong(ctx context.Context, merchantID []uuid.UUID) ([]GetMerchantsLatLongRow, error) {
	rows, err := q.db.Query(ctx, getMerchantsLatLong, merchantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMerchantsLatLongRow{}
	for rows.Next() {
		var i GetMerchantsLatLongRow
		if err := rows.Scan(&i.ID, &i.Lat, &i.Lng); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
