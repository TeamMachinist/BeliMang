// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: estimate.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createEstimate = `-- name: CreateEstimate :one
INSERT INTO estimates (
    user_lat, user_lng, orders, total_price, estimated_delivery_time_in_minutes
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, total_price, estimated_delivery_time_in_minutes
`

type CreateEstimateParams struct {
	UserLat                        float64 `json:"user_lat"`
	UserLng                        float64 `json:"user_lng"`
	Orders                         []byte  `json:"orders"`
	TotalPrice                     int64   `json:"total_price"`
	EstimatedDeliveryTimeInMinutes int32   `json:"estimated_delivery_time_in_minutes"`
}

type CreateEstimateRow struct {
	ID                             uuid.UUID `json:"id"`
	TotalPrice                     int64     `json:"total_price"`
	EstimatedDeliveryTimeInMinutes int32     `json:"estimated_delivery_time_in_minutes"`
}

func (q *Queries) CreateEstimate(ctx context.Context, arg CreateEstimateParams) (CreateEstimateRow, error) {
	row := q.db.QueryRow(ctx, createEstimate,
		arg.UserLat,
		arg.UserLng,
		arg.Orders,
		arg.TotalPrice,
		arg.EstimatedDeliveryTimeInMinutes,
	)
	var i CreateEstimateRow
	err := row.Scan(&i.ID, &i.TotalPrice, &i.EstimatedDeliveryTimeInMinutes)
	return i, err
}

const getItemPrice = `-- name: GetItemPrice :one
SELECT price
FROM items
WHERE id = $1::uuid AND merchant_id = $2::uuid
`

type GetItemPriceParams struct {
	ItemID     uuid.UUID `json:"item_id"`
	MerchantID uuid.UUID `json:"merchant_id"`
}

func (q *Queries) GetItemPrice(ctx context.Context, arg GetItemPriceParams) (int64, error) {
	row := q.db.QueryRow(ctx, getItemPrice, arg.ItemID, arg.MerchantID)
	var price int64
	err := row.Scan(&price)
	return price, err
}

const getMerchantLatLong = `-- name: GetMerchantLatLong :one
SELECT id, lat, lng
FROM merchants
WHERE id = $1::uuid
`

type GetMerchantLatLongRow struct {
	ID  uuid.UUID `json:"id"`
	Lat float64   `json:"lat"`
	Lng float64   `json:"lng"`
}

func (q *Queries) GetMerchantLatLong(ctx context.Context, merchantID uuid.UUID) (GetMerchantLatLongRow, error) {
	row := q.db.QueryRow(ctx, getMerchantLatLong, merchantID)
	var i GetMerchantLatLongRow
	err := row.Scan(&i.ID, &i.Lat, &i.Lng)
	return i, err
}
