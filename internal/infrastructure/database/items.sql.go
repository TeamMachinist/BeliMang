// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: items.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (
    merchant_id,
    name,
    product_category,
    price
) VALUES (
    $1::uuid,
    $2::text,
    $3::product_category,
    $4::bigint
)
RETURNING id
`

type CreateItemParams struct {
	Merchantid      uuid.UUID       `json:"merchantid"`
	Name            string          `json:"name"`
	Productcategory ProductCategory `json:"productcategory"`
	Price           int64           `json:"price"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createItem,
		arg.Merchantid,
		arg.Name,
		arg.Productcategory,
		arg.Price,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const merchantExists = `-- name: MerchantExists :one
SELECT EXISTS(SELECT 1 FROM merchants WHERE id = $1)
`

func (q *Queries) MerchantExists(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, merchantExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
