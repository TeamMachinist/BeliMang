// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package database

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type UserRole string

const (
	UserRoleUser  UserRole = "user"
	UserRoleAdmin UserRole = "admin"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Estimates struct {
	ID                             uuid.UUID `json:"id"`
	UserLat                        float64   `json:"user_lat"`
	UserLng                        float64   `json:"user_lng"`
	Orders                         []byte    `json:"orders"`
	TotalPrice                     int64     `json:"total_price"`
	EstimatedDeliveryTimeInMinutes int32     `json:"estimated_delivery_time_in_minutes"`
	CreatedAt                      time.Time `json:"created_at"`
}

type Items struct {
	ID              uuid.UUID `json:"id"`
	MerchantID      uuid.UUID `json:"merchant_id"`
	Name            string    `json:"name"`
	ProductCategory string    `json:"product_category"`
	Price           int64     `json:"price"`
	ImageUrl        string    `json:"image_url"`
	CreatedAt       time.Time `json:"created_at"`
}

type Merchants struct {
	ID               uuid.UUID   `json:"id"`
	AdminID          uuid.UUID   `json:"admin_id"`
	Name             string      `json:"name"`
	MerchantCategory string      `json:"merchant_category"`
	ImageUrl         string      `json:"image_url"`
	Lat              float64     `json:"lat"`
	Lng              float64     `json:"lng"`
	Location         interface{} `json:"location"`
	CreatedAt        time.Time   `json:"created_at"`
}

type Users struct {
	ID           uuid.UUID `json:"id"`
	Username     string    `json:"username"`
	PasswordHash string    `json:"password_hash"`
	Email        string    `json:"email"`
	Role         UserRole  `json:"role"`
	CreatedAt    time.Time `json:"created_at"`
}
