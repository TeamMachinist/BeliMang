// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const checkEmailExistsForRole = `-- name: CheckEmailExistsForRole :one
SELECT EXISTS(SELECT 1 FROM users WHERE email = $1 AND role = $2)
`

type CheckEmailExistsForRoleParams struct {
	Email string   `json:"email"`
	Role  UserRole `json:"role"`
}

func (q *Queries) CheckEmailExistsForRole(ctx context.Context, arg CheckEmailExistsForRoleParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkEmailExistsForRole, arg.Email, arg.Role)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkUsernameExists = `-- name: CheckUsernameExists :one
SELECT EXISTS(SELECT 1 FROM users WHERE username = $1)
`

func (q *Queries) CheckUsernameExists(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRow(ctx, checkUsernameExists, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, password_hash, email, role, created_at)
VALUES ($1, $2, $3, $4, $5, NOW())
RETURNING id, username, password_hash, email, role, created_at
`

type CreateUserParams struct {
	ID           uuid.UUID `json:"id"`
	Username     string    `json:"username"`
	PasswordHash string    `json:"password_hash"`
	Email        string    `json:"email"`
	Role         UserRole  `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Users, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.PasswordHash,
		arg.Email,
		arg.Role,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, role, created_at
FROM users 
WHERE id = $1
`

type GetUserByIDRow struct {
	ID        uuid.UUID `json:"id"`
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	Role      UserRole  `json:"role"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsernameAndRole = `-- name: GetUserByUsernameAndRole :one
SELECT id, username, password_hash, email, role, created_at
FROM users 
WHERE username = $1 AND role = $2
`

type GetUserByUsernameAndRoleParams struct {
	Username string   `json:"username"`
	Role     UserRole `json:"role"`
}

func (q *Queries) GetUserByUsernameAndRole(ctx context.Context, arg GetUserByUsernameAndRoleParams) (Users, error) {
	row := q.db.QueryRow(ctx, getUserByUsernameAndRole, arg.Username, arg.Role)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getUsersByRole = `-- name: GetUsersByRole :many
SELECT id, username, email, role, created_at
FROM users 
WHERE role = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetUsersByRoleParams struct {
	Role   UserRole `json:"role"`
	Limit  int32    `json:"limit"`
	Offset int32    `json:"offset"`
}

type GetUsersByRoleRow struct {
	ID        uuid.UUID `json:"id"`
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	Role      UserRole  `json:"role"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) GetUsersByRole(ctx context.Context, arg GetUsersByRoleParams) ([]GetUsersByRoleRow, error) {
	rows, err := q.db.Query(ctx, getUsersByRole, arg.Role, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUsersByRoleRow{}
	for rows.Next() {
		var i GetUsersByRoleRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const verifyAdminByID = `-- name: VerifyAdminByID :one
SELECT id, username, role
FROM users 
WHERE id = $1 AND role = 'admin'
`

type VerifyAdminByIDRow struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
	Role     UserRole  `json:"role"`
}

func (q *Queries) VerifyAdminByID(ctx context.Context, id uuid.UUID) (VerifyAdminByIDRow, error) {
	row := q.db.QueryRow(ctx, verifyAdminByID, id)
	var i VerifyAdminByIDRow
	err := row.Scan(&i.ID, &i.Username, &i.Role)
	return i, err
}

const verifyUserByID = `-- name: VerifyUserByID :one
SELECT id, username, role
FROM users 
WHERE id = $1 AND role = 'user'
`

type VerifyUserByIDRow struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
	Role     UserRole  `json:"role"`
}

func (q *Queries) VerifyUserByID(ctx context.Context, id uuid.UUID) (VerifyUserByIDRow, error) {
	row := q.db.QueryRow(ctx, verifyUserByID, id)
	var i VerifyUserByIDRow
	err := row.Scan(&i.ID, &i.Username, &i.Role)
	return i, err
}
